# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: None Do not return anything, modify head in-place instead.
        """
        cnt = 1
        node = head
        while node.next:
            cnt += 1
            node = node.next

        m = -(cnt//-2)   #Cieling division
        prev, curr = None, head
        for i in range(cnt):
            if i >= m:
                nxt = curr.next
                curr.next = prev
                prev = curr
                curr = nxt
            else:
                prev = curr
                curr = curr.next

        curr = head
        nxt = prev
        for i in range(cnt-1):
            temp = curr.next
            curr.next = nxt
            curr = curr.next
            nxt = temp
        curr.next = None
